package io.mrlokop.kotlin.utils.conventer

import io.mrlokop.kotlin.utils.conventer.enities.EntryEntity

@Deprecated("Not supported now")
class PHPConverter(val entry: EntryEntity) {
    val ar = "=>"
    fun convert(): String {
        var script = "///\n"
        script += "///\tAutogenerated by KConvertLib\n"
        script += "///\t\tAuthor: vk.com/themrlokopoff\n"
        script += "///\n"
        var id = 0
        var entries = mutableListOf<String>()
        if (entry.packageName.isNotEmpty()) {
            entries.add("entry_$id")
            script += "\n\n\$entry_$id = ["
            script += "\n\t\"package\" => \"${entry.packageName}\","
            script += "\n\t\"declarations\" $ar ["
            for (topLevel in entry.topLevels) {

                script += "\n\t\t // TopLevel Object: ${topLevel.declarations.size} declarations"
                topLevel.declarations.forEach {
                    it.functions.forEach {
                        script += "\n\t\t["
                        script += "\n\t\t\t\"type\" $ar \"function\","
                        script += "\n\t\t\t\"type\" $ar \"${it.name}\","
                        if (it.mods.size > 0) {
                            script += "\n\t\t\t\"mods\" $ar [\"${it.mods.joinToString("\", \"")}\"],"
                        }
                        script += "\n\t\t],"
                    }
                }
            }
            script += "\n\t]"
            script += "\n}\n\n"
            id++

        }
        script += "\n\n\n//Dump all entries\n\$entries = ["
        for (entry in entries) {
            script += "\n\t\"$entry\","
        }
        script += "\n]"



        return script
    }

    fun esc(str: String): String {
        return "\"$str\""
    }

}

